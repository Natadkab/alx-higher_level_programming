The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

Importing function from the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding 1 and 2
    >>> add_integer(1, 2)
    3

Adding 2.1 and 98
    >>> add_integer(2.1)
    100

Subtracting 100 and 2
    >>> add_integer(100, -2)
    98

Adding 2.1 and 98
    >>> add_integer(2.1)
    100

Subtracting 100.3 and 2
	>>> add_integer(100.3, -2)
	98

Adding an intiger number and a string
    >>> add_integer(10, "string")
    Traceback (most recent call last):
	    ...
    TypeError: b must be an integer

Adding two float numbers
    >>> add_integer(1.1, 1.1)
    2

Passing None
    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Adding a letter and a number
    >>> add_integer(2, '2')
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Adding a list to a number
    >>> add_integer([], 4)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

Case NaN:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
The ``100-matrix_mul`` module
============================

Using ``matrix_mul``
---------------------

Importing function from the module:

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Multiplying two matrices

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

Multiplying two matrices 2

    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    [[13, 16]]

Multiplying two matrices 3

    >>> list1 = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
    >>> list2 = [[1, -1, 2], [2, -1, 2], [3, -3, 0]]
    >>> matrix_mul(list1, list2)
    [[30, -26, 10], [36, -31, 14], [42, -36, 18]]

Multiplying two matrices 4

    >>> matrix_mul([[1, 5, 7]], [[3], [5], [8]])
    [[84]]

Passing None as a matrix

    >>> matrix_mul(None, None)
    Traceback (most recent call last):
    	      ...
    TypeError: m_a must be a list

Passing None as a matrix

    >>> matrix_mul([[7, 12]], None)
    Traceback (most recent call last):
    	      ...
    TypeError: m_b must be a list

Passing a tuple as a matrix

    >>> matrix_mul((1, 3, 5), [[1.3], [5.2], [7.7]])
    Traceback (most recent call last):
    	      ...
    TypeError: m_a must be a list

Passing a string as a matrix

    >>> matrix_mul([[3, 3], [4, 4]], "Holberton")
    Traceback (most recent call last):
    	      ...
    TypeError: m_b must be a list

Passing a list of tuples

   >>> matrix_mul([(1, 5, 10)], [(1), (5)])
   Traceback (most recent call last):
   	     ...
   TypeError: m_a must be a list of lists

Passing a list of string

   >>> matrix_mul([[]], ["Holberton"])
   Traceback (most recent call last):
   	     ...
   TypeError: m_b must be a list of lists

Passing an empty matrix

    >>> matrix_mul([], [[1]])
    Traceback (most recent call last):
    	      ...
    ValueError: m_a can't be empty

Passing an empty matrix 2

    >>> matrix_mul([[1, 2]], [[]])
    Traceback (most recent call last):
    	      ...
    ValueError: m_b can't be empty

Passing a matrix with a list of strings

    >>> matrix_mul([[1, '1', 1], ['2', 2, '2']], [[3], [3]])
    Traceback (most recent call last):
    	      ...
    TypeError: m_a should contain only integers or floats

Passing a matrix with a list of strings 2

    >>> matrix_mul([[2, 4, 6], [3, 6, 9]], [[1], ['2'], [3]])
    Traceback (most recent call last):
    	      ...
    TypeError: m_b should contain only integers or floats

Passing a matrix with an empty list

    >>> matrix_mul([[12, 12, 12], [], [14, 14, 14]], [[2], [3], [8]])
    Traceback (most recent call last):
    	      ...
    TypeError: each row of m_a must be of the same size

Passing a matrix which its rows have different size

    >>> matrix_mul([[2, 2, 2], [4, 4, 4]], [[2], [3, 3]])
    Traceback (most recent call last):
    	      ...
    TypeError: each row of m_b must be of the same size

Passing two matrix that can't be multiplied

    >>> matrix_mul([[5, 2, 3], [7, 13, 2], [1, 0, 3]], [[2, 3], [6, 9]])
    Traceback (most recent call last):
    	      ...
    ValueError: m_a and m_b can't be multiplied

Missing one argument

    >>> matrix_mul([[1, 2]])
    Traceback (most recent call last):
    	      ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Missing arguments

    >>> matrix_mul()
    Traceback (most recent call last):
    	      ...
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
The ``101-lazy_matrix_mul`` module
============================

Using ``lazy_matrix_mul``
---------------------

Importing function from the module:

    >>> matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Multiplying two matrices

    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
     	   [15, 22]])

Multiplying two matrices 2

    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    array([[13, 16]])

Multiplying two matrices 3

    >>> list1 = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
    >>> list2 = [[1, -1, 2], [2, -1, 2], [3, -3, 0]]
    >>> matrix_mul(list1, list2)
    array([[ 30, -26,  10],
           [ 36, -31,  14],
           [ 42, -36,  18]])

Multiplying two matrices 4

    >>> matrix_mul([[1, 5, 7]], [[3], [5], [8]])
    array([[84]])

Passing None as a matrix

    >>> matrix_mul(None, None)
    Traceback (most recent call last):
    	      ...
    TypeError: Object arrays are not currently supported

Passing None as a matrix

    >>> matrix_mul([[7, 12]], None)
    Traceback (most recent call last):
    	      ...
    TypeError: Object arrays are not currently supported

Passing a tuple as a matrix

    >>> matrix_mul((1, 3, 5), [[1.3], [5.2], [7.7]])
    array([55.4])

Passing a string as a matrix

    >>> matrix_mul([[3, 3], [4, 4]], "Holberton")
    Traceback (most recent call last):
    	      ...
    ValueError: Scalar operands are not allowed, use '*' instead

Passing a list of tuples

   >>> matrix_mul([(1, 5, 10)], [(1), (5)])
   Traceback (most recent call last):
   	     ...
   ValueError: shapes (1,3) and (2,) not aligned: 3 (dim 1) != 2 (dim 0)

Passing a list of string

   >>> matrix_mul([[]], ["Holberton"])
   Traceback (most recent call last):
   	     ...
   ValueError: shapes (1,0) and (1,) not aligned: 0 (dim 1) != 1 (dim 0)

Passing an empty matrix

    >>> matrix_mul([], [[1]])
    Traceback (most recent call last):
    	      ...
    ValueError: shapes (0,) and (1,1) not aligned: 0 (dim 0) != 1 (dim 0)

Passing an empty matrix 2

    >>> matrix_mul([[1, 2]], [[]])
    Traceback (most recent call last):
    	      ...
    ValueError: shapes (1,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

Passing a matrix with a list of strings

    >>> matrix_mul([[1, '1', 1], ['2', 2, '2']], [[3], [3]])
    Traceback (most recent call last):
    	      ...
    ValueError: shapes (2,3) and (2,1) not aligned: 3 (dim 1) != 2 (dim 0)

Passing a matrix with a list of strings 2

    >>> matrix_mul([[2, 4, 6], [3, 6, 9]], [[1], ['2'], [3]])
    Traceback (most recent call last):
    	      ...
    TypeError: invalid data type for einsum

Passing a matrix with an empty list

    >>> matrix_mul([[12, 12, 12], [], [14, 14, 14]], [[2], [3], [8]])
    Traceback (most recent call last):
    	      ...
    ValueError: setting an array element with a sequence.

Passing a matrix which its rows have different size

    >>> matrix_mul([[2, 2, 2], [4, 4, 4]], [[2], [3, 3]])
    Traceback (most recent call last):
    	      ...
    ValueError: setting an array element with a sequence.

Passing two matrix that can't be multiplied

    >>> matrix_mul([[5, 2, 3], [7, 13, 2], [1, 0, 3]], [[2, 3], [6, 9]])
    Traceback (most recent call last):
    	      ...
    ValueError: shapes (3,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

Missing one argument

    >>> matrix_mul([[1, 2]])
    Traceback (most recent call last):
    	            ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Missing arguments

    >>> matrix_mul()
    Traceback (most recent call last):
    	            ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
The ``2-matrix_divided`` module
===============================

Using ``matrix_divided``
------------------------

Importing function from the module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Dividing a matrix by 3
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Dividing matrix by 0:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

Dividing matrix by negative
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], -1)
    [[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]]

Dividing a matrix which has positive and negative integer/float numbers

    >>> matrix_divided([[-1, 3.1, 0], [78, -103.7, 54]], 9.2)
    [[-0.11, 0.34, 0.0], [8.48, -11.27, 5.87]]

Dividing matrix by float
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 1.1)
    [[0.91, 1.82, 2.73], [3.64, 4.55, 5.45]]

Passing an empty matrix:

    >>> matrix_divided([], 10)
    Traceback (most recent call last):
    	...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a tuple as an argument:

    >>> matrix_divided((3, 6, 9), 3)
    Traceback (most recent call last):
    	...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing a matrix which its rows don't have the same size:

    >>> matrix_divided([[22, 34], [2.78, 7.1, -10, 2], [-8]], 3)
    Traceback (most recent call last):
    	...
    TypeError: Each row of the matrix must have the same size

Dividing a matrix which some of its elements aren't integer/float numbers:

    >>> matrix_divided([[2.7, 4], ['6', 8.4], [10.1, '12'], [5.3, '10.2', 15.8]], 5)
    Traceback (most recent call last):
    	...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a matrix which one of its elements is a tuple:

    >>> matrix_divided([[1, -1], (2, -2), [3, -3]], 1)
    Traceback (most recent call last):
    	...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing div as a list

    >>> matrix_divided([[5.7, 8.1], [7.7, 4.9]], [2])
    Traceback (most recent call last):
    	...
    TypeError: div must be a number

Passing div as a string

    >>> matrix_divided([[10, 50], [30, 20]], "10")
    Traceback (most recent call last):
    	...
    TypeError: div must be a number
The ``3-say_my_name`` module
============================

Using ``say_my_name``
---------------------

Importing function from the module:
    >>> say_my_name = __import__('3-say_my_name').say_my_name

Passing first_name and last_name correctly
    >>> say_my_name("Daniel", "Yohannes")
    My name is Daniel Yohannes

Passing first_name and last_name correctly 2
    >>> say_my_name("Daniel")
    My name is Daniel 

Passing None to last_name
    >>> say_my_name("Daniel", None)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

Passing None
    >>> say_my_name(None)
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Passing number to first_name
    >>> say_my_name(10, "Yohannes")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Passing number to last_name
    >>> say_my_name("Daniel", 10)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

Passing no  argument
    >>> say_my_name()
    Traceback (most recent call last):
        ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'
The ``4-print_square`` module
============================

Using ``print_square``
---------------------

Importing function from the module:

    >>> print_square = __import__('4-print_square').print_square

Printing a square with a size of 5

    >>> print_square(5)
    #####
    #####
    #####
    #####
    #####

Passing 0 as the size of the square

    >>> print_square(0)

Passing a float number as the size of the square

    >>> print_square(1.0)
    Traceback (most recent call last):
    	      ...
    TypeError: size must be an integer

Passing a string as the size of the square

    >>> print_square('2')
    Traceback (most recent call last):
    	      ...
    TypeError: size must be an integer

Passing a negative number as the size of the square

    >>> print_square(-2)
    Traceback (most recent call last):
    	     ...
    ValueError: size must be >= 0

Passing None as the size of the square

    >>> print_square(None)
    Traceback (most recent call last):
    	      ...
    TypeError: size must be an integer

Missing argument

   >>> print_square()
   Traceback (most recent call last):
   	     ...
   TypeError: print_square() missing 1 required positional argument: 'size'
The ``5-text_indentation`` module
============================

Using ``text_indentation``
---------------------

Importing function from the module:

    >>> text_indentation = __import__('5-text_indentation').text_indentation

Printing a large message

    >>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres""")
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

Printing a word with spaces around

    >>> text_indentation("    Holberton    ")
    Holberton

Printing a word with a special character at the end

    >>> text_indentation("    Hello    .")
    Hello.
    <BLANKLINE>

Printing all special characters

    >>> text_indentation(".?:")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

Passing Node as a text

    >>> text_indentation(None)
    Traceback (most recent call last):
    	      ...
    TypeError: text must be a string

Passing a number as a text

    >>> text_indentation(10)
    Traceback (most recent call last):
    	      ...
    TypeError: text must be a string

Printing a text with special characters

    >>> text_indentation("Betty: Holberton? Python is. cool   ")
    Betty:
    <BLANKLINE>
    Holberton?
    <BLANKLINE>
    Python is.
    <BLANKLINE>
    cool

Printing a char number

    >>> text_indentation('2')
    2

Passing an empty string

    >>> text_indentation('    ')

Passing a new line as a text

    >>> text_indentation('\n')
    <BLANKLINE>

Passing a special character and some special characters

    >>> text_indentation('\n.\n?\n:')
    <BLANKLINE>
    .
    <BLANKLINE>
    <BLANKLINE>
    ?
    <BLANKLINE>
    <BLANKLINE>
    :
    <BLANKLINE>

Passing a text with spaces and one new line

    >>> text_indentation("   \n")
    <BLANKLINE>

Passing a text with spaces and one new line 2

   >>> text_indentation("   \n   ")
   <BLANKLINE>

Passing a text with spaces and one new line 3

   >>> text_indentation("\n   ")
   <BLANKLINE>
